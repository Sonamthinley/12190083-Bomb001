We will first put a breakpoint on Phase 5 and run phase.txt file which contains all the required input for previous phases.

For phase 5, '5 6' will be my random input. Then dissassemble the code.

(gdb) b phase_5
Breakpoint 1 at 0x401081
(gdb) r phase.txt
Starting program: /mnt/c/Users/Asus/OneDrive/Desktop/bomb001/bomb phase.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
5 6

Breakpoint 1, 0x0000000000401081 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x0000000000401081 <+0>:     sub    $0x18,%rsp     //Makes a Stack Frame
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi     //Format of the input : %d %d
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a7 <+38>:    cmp    $0x1,%eax         //compare value of %eax with $0x1
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>     //if %eax Greater than 1, Skip the Bomb
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
   
   0x00000000004010b1 <+48>:    mov    (%rsp),%eax    //Move value of %rsp to %eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax     //Perform Logic gate operation on $0xf & %eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)   //Move %eax to %rsp
   0x00000000004010ba <+57>:    cmp    $0xf,%eax    //compare %eax to $0xf (15)
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>    //if Equal, call the bomb at <+60>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx     //move 0 to %ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx   //move 0 to %edx
   0x00000000004010c9 <+72>:    add    $0x1,%edx   //add 1 with %edx and store it in %edx
   0x00000000004010cc <+75>:    cltq
   
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax    //move value of 0x402480(,%rax,4) to %eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx     //add %ecx and %eax, store result in %ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax    //compare %eax with $0xf
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>   //if %eax NOT Equal to $0xf, jump to <+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)  //if %eax EQUAL to $0xf, move 0xf to %rsp
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx   //compare $edx with $0xf
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109> //call bomb if $edx Not equal to $0xf
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx   //compare %ecx with 0x4(%rsp).
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>   //if EQUAL skip the bomb
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.
(gdb)

At <+38>, compare %eax with $0x1. Check the value of %eax.
If %eax is greater than 1 then skip the bomb and jump to instruction at <+48>.

(gdb) u *0x00000000004010a7
0x00000000004010a7 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x0000000000401081 <+0>:     sub    $0x18,%rsp
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x00000000004010a7 <+38>:    cmp    $0x1,%eax
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
   0x00000000004010b1 <+48>:    mov    (%rsp),%eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)
   0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
   0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

The value of %eax is 2 which is greater than 1 so bomb is skipped. Jump to instruction at <+48>
(gdb) i r
rax            0x2                 2   
rbx            0x7ffffffee548      140737488282952
rcx            0x0                 0
rdx            0x7ffffffee434      140737488282676
rsi            0x0                 0
rdi            0x7ffffffedde0      140737488281056
rbp            0x0                 0x0
rsp            0x7ffffffee430      0x7ffffffee430

Dump of assembler code for function phase_5:
   0x0000000000401081 <+0>:     sub    $0x18,%rsp
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a7 <+38>:    cmp    $0x1,%eax
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
=> 0x00000000004010b1 <+48>:    mov    (%rsp),%eax    //Move value of %rsp to %eax.
   0x00000000004010b4 <+51>:    and    $0xf,%eax    //Perform Logic gate operation on $0xf & %eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)   //Move value of %eax to %rsp
   0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
   0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

Jump to Compare instruction at <+57> and compare %eax with 0xf.

   0x00000000004010b1 <+48>:    mov    (%rsp),%eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)
=> 0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
   0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

Check the value of %eax and compare it with value of $0xf. If they are equal then bomb will explode otherwise jump to next instruction.

(gdb) i r
rax            0x5                 5    //first user input value.
rbx            0x7ffffffee548      140737488282952
rcx            0x0                 0
rdx            0x7ffffffee434      140737488282676
rsi            0x0                 0
rdi            0x7ffffffedde0      140737488281056
rbp            0x0                 0x0
rsp            0x7ffffffee430      0x7ffffffee430

Since they are not equal the bomb is not exploded. Jump to next instruction.

   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx    //move 0 to %ecx
=> 0x00000000004010c4 <+67>:    mov    $0x0,%edx    //move 0 to %edx
   0x00000000004010c9 <+72>:    add    $0x1,%edx    //add 1 with %edx and store the result in %edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax  //move value of 0x402480(,%rax,4) to %eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx    //add  %eax with %ecx and store the result in %ecx.
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx 
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

Now, jump to compare instruction at <+86> and compare %eax with $0xf. 
If they are not equal jump to <+72>, else execute next instruction.

   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
=> 0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

Check the value of %eax.
//1st iteration
(gdb) i r
rax            0xc                 12
rbx            0x7ffffffee548      140737488282952
rcx            0xc                 12
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7ffffffedde0      140737488281056
rbp            0x0                 0x0
rsp            0x7ffffffee430      0x7ffffffee430

The value of %eax is 12 which means it's not equal to 0xf so it will jump to <+72>. So here the iteration will take place. 
In each iteration the value of %eax will change all the time.

Dump of assembler code for function phase_5:
   0x0000000000401081 <+0>:     sub    $0x18,%rsp
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a7 <+38>:    cmp    $0x1,%eax
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
   0x00000000004010b1 <+48>:    mov    (%rsp),%eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)
   0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
=> 0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
=> 0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

//checking the eax or rax value at 3rd iteration.
(gdb) i r
rax            0x7                 7
rbx            0x7fffffffdef8      140737488346872
rcx            0x16                22
rdx            0x3                 3
rsi            0x1                 1
rdi            0x7fffffffd760      140737488344928
rbp            0x2                 0x2
rsp            0x7fffffffddb0      0x7fffffffddb0

Dump of assembler code for function phase_5:
   0x0000000000401081 <+0>:     sub    $0x18,%rsp
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a7 <+38>:    cmp    $0x1,%eax
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
   0x00000000004010b1 <+48>:    mov    (%rsp),%eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)
   0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
=> 0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
=> 0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

//checking the eax value at 4th iteration.
(gdb) i r
rax            0xb                 11
rbx            0x7fffffffdef8      140737488346872
rcx            0x21                33
rdx            0x4                 4
rsi            0x1                 1
rdi            0x7fffffffd760      140737488344928
rbp            0x2                 0x2
rsp            0x7fffffffddb0      0x7fffffffddb0

Dump of assembler code for function phase_5:
   0x0000000000401081 <+0>:     sub    $0x18,%rsp
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a7 <+38>:    cmp    $0x1,%eax
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
   0x00000000004010b1 <+48>:    mov    (%rsp),%eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)
   0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
=> 0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
=> 0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

Following the same procedure, I went till 15th iteration until the value of %eax was equal to 15.

(gdb) i r
rax            0xf                 15
rbx            0x7fffffffdef8      140737488346872
rcx            0x73                115
rdx            0xf                 15
rsi            0x1                 1
rdi            0x7fffffffd760      140737488344928
rbp            0x2                 0x2
rsp            0x7fffffffddb0      0x7fffffffddb0

So, now the value of %eax is equal to 15. We can jump to next instruction at <+103>. and check the value of 0x4(%rsp) and compare to %ecx.

   0x00000000004010e3 <+98>:	cmp    $0xf,%edx
   0x00000000004010e6 <+101>:	jne    0x4010ee <phase_5+109>
=> 0x00000000004010e8 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:	je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:	call   0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:	xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:	je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:	call   0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:	add    $0x18,%rsp
   0x000000000040110c <+139>:	ret    
End of assembler dump.

(gdb) x /d0x4+$rsp
0x7fffffffddb4:	6    //second user input value.

Check the value of %ecx

(gdb) i r
rax            0xf                 15
rbx            0x7fffffffdef8      140737488346872
rcx            0x73                115      //%ecx = 115.
rdx            0xf                 15
rsi            0x1                 1
rdi            0x7fffffffd760      140737488344928
rbp            0x2                 0x2
rsp            0x7fffffffddb0      0x7fffffffddb0

Since I kept second input as 6, and it is not equal to the system input. So the bomb explode function is called. 
So now i will change my second input value to 115.

new input : 5 115

(gdb) r phase.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/Asus/OneDrive/Desktop/bomb001/bomb phase.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
5 115

Breakpoint 1, 0x0000000000401081 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x0000000000401081 <+0>:     sub    $0x18,%rsp
   0x0000000000401085 <+4>:     mov    %fs:0x28,%rax
   0x000000000040108e <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401093 <+18>:    xor    %eax,%eax
   0x0000000000401095 <+20>:    lea    0x4(%rsp),%rcx
   0x000000000040109a <+25>:    mov    %rsp,%rdx
   0x000000000040109d <+28>:    mov    $0x4025cf,%esi
   0x00000000004010a2 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a7 <+38>:    cmp    $0x1,%eax
   0x00000000004010aa <+41>:    jg     0x4010b1 <phase_5+48>
   0x00000000004010ac <+43>:    callq  0x40143d <explode_bomb>
   0x00000000004010b1 <+48>:    mov    (%rsp),%eax
   0x00000000004010b4 <+51>:    and    $0xf,%eax
   0x00000000004010b7 <+54>:    mov    %eax,(%rsp)
   0x00000000004010ba <+57>:    cmp    $0xf,%eax
   0x00000000004010bd <+60>:    je     0x4010ee <phase_5+109>
   0x00000000004010bf <+62>:    mov    $0x0,%ecx
   0x00000000004010c4 <+67>:    mov    $0x0,%edx
   0x00000000004010c9 <+72>:    add    $0x1,%edx
   0x00000000004010cc <+75>:    cltq
   0x00000000004010ce <+77>:    mov    0x402480(,%rax,4),%eax
   0x00000000004010d5 <+84>:    add    %eax,%ecx
   0x00000000004010d7 <+86>:    cmp    $0xf,%eax
   0x00000000004010da <+89>:    jne    0x4010c9 <phase_5+72>
   0x00000000004010dc <+91>:    movl   $0xf,(%rsp)
   0x00000000004010e3 <+98>:    cmp    $0xf,%edx
   0x00000000004010e6 <+101>:   jne    0x4010ee <phase_5+109>
   0x00000000004010e8 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010ec <+107>:   je     0x4010f3 <phase_5+114>
   0x00000000004010ee <+109>:   callq  0x40143d <explode_bomb>
   0x00000000004010f3 <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f8 <+119>:   xor    %fs:0x28,%rax
   0x0000000000401101 <+128>:   je     0x401108 <phase_5+135>
   0x0000000000401103 <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401108 <+135>:   add    $0x18,%rsp
   0x000000000040110c <+139>:   retq
End of assembler dump.

(gdb) u *0x000000000040110c
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:102
102         phase_defused();

Finally the bomb is diffused.

Solution:
5 115


